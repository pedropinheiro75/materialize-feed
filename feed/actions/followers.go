package actions

import (
	"feed/models"
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"net/http"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Follower)
// DB Table: Plural (followers)
// Resource: Plural (Followers)
// Path: Plural (/followers)
// View Template Folder: Plural (/templates/followers/)

// FollowersResource is the resource for the Follower model
type FollowersResource struct {
	buffalo.Resource
}

// List gets all Followers. This function is mapped to the path
// GET /followers
func (v FollowersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	followers := &models.Followers{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Followers from the DB
	if err := q.All(followers); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(followers))
	}).Respond(c)
}

// Show gets the data for one Follower. This function is mapped to
// the path GET /followers/{follower_id}
func (v FollowersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Follower
	follower := &models.Follower{}

	// To find the Follower the parameter follower_id is used.
	if err := tx.Find(follower, c.Param("follower_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(follower))
	}).Respond(c)
}

// Create adds a Follower to the DB. This function is mapped to the
// path POST /followers
func (v FollowersResource) Create(c buffalo.Context) error {
	// Allocate an empty Follower
	follower := &models.Follower{}

	// Bind follower to the html form elements
	if err := c.Bind(follower); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(follower)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(follower))
	}).Respond(c)
}

// Update changes a Follower in the DB. This function is mapped to
// the path PUT /followers/{follower_id}
func (v FollowersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Follower
	follower := &models.Follower{}

	if err := tx.Find(follower, c.Param("follower_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Follower to the html form elements
	if err := c.Bind(follower); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(follower)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Respond(c)
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(follower))
	}).Respond(c)
}

// Destroy deletes a Follower from the DB. This function is mapped
// to the path DELETE /followers/{follower_id}
func (v FollowersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Follower
	follower := &models.Follower{}

	// To find the Follower the parameter follower_id is used.
	if err := tx.Find(follower, c.Param("follower_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(follower); err != nil {
		return err
	}

	return responder.Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(follower))
	}).Respond(c)
}
